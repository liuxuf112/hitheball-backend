
const errors = require("../helpers/Errors");
const queries = require("../helpers/Queries");
const getUser = require("../helpers/getUser");
//post request from player to join a game.
//body looks like this:
/*
    {
        deviceId: asdfsdafsd,
        gameId: ADFDAS,
        username: FDSFDA,
        team:1  //team 1 means red, team 2 means blue.
    }


*/
const joinGame = async (httpRequest,httpResponse)=>{
    var body = httpRequest.body;
    var deviceId = body.deviceId;
   
    var userNumber = await getUser.getUser(httpResponse,deviceId);
    if(userNumber == errors.ASYNC_FAILURE){   //if getting the user failed.
        return;
    }else{
        body.userNumber = userNumber;
        createPlayerInGame(httpRequest,httpResponse,body);
    }
  
    
}
//returns team ID based on team number 1 or 2 and a list of teams 
//list of teams usually generated by getTeamsWithGameId
function getTeamId(teams,teamNumber){

    for(var i = 0; i < teams.length; i++){
        if(teams[i].team_number == teamNumber){
            return teams[i].team_id;
        }
    }
    return errors.ASYNC_FAILURE;
}



//NO CHECK IF VIOLATING MAX PLAYER CONSTRAINTS
async function createPlayerInGame(httpRequest,httpResponse,body){
  
    var teamId;

    //gets all teams with a certain teamId.
    try{   
        var res = await queries.getTeamsWithGameId(body.gameId);
        teamId = getTeamId(res.rows,body.team);
    }catch(err){
        errors.handleServerError("getTeamsWithGameId",httpResponse,err);
    }
    if(teamId==-1){
        console.error(`No team id found in getTeamsWithGameId for game ${body.gameId}`);
        httpResponse.status(500).send("Internal Server Error");
        return;
    }

    var defaultTagRadius,defaultViewRadius;
    try{
        var res = await queries.getDefaultRadiusesFromGame(body.gameId);
        defaultTagRadius = res.rows[0].default_tag_radius;
        defaultViewRadius = res.rows[0].default_view_radius;
    }catch(err){
        errors.handleServerError("getDefaultRadiusFromGame",httpResponse,err);
        return;
    }

    try{
        var res = queries.createPlayer(defaultTagRadius,defaultViewRadius,body.username,teamId,body.userNumber);
        httpResponse.status(200).send("added to game!");
    }catch(err){
        errors.handleServerError("createPlayer",httpResponse,err);
    }    
}





module.exports = {
    joinGame
}